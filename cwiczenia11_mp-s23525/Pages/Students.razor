@page "/students"
@using cwiczenia11_mp_s23525.Models
@inject cwiczenia11_mp_s23525.Services.IStudentService StudentService
@inject IJSRuntime js
@inject NavigationManager naviManager
<h3>Students</h3>
<style>
* {
  box-sizing: border-box;
}

.row {
  display: flex;
  margin-left:-5px;
  margin-right:-5px;
}

.column {
  flex: 50%;
  padding: 5px;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: left;
  padding: 16px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}
</style>
<table style="text-align: center" width="100%">
        <thead>
            <th>Avatar</th>
            <th class="sort-th" @onclick="@(() => SortTable("FirstName"))">First name</th>
            <th class="sort-th" @onclick="@(() => SortTable("LastName"))">Last Name</th>
            <th class="sort-th" @onclick="@(() => SortTable("Birthdate"))">Birthdate</th>
            <th class="sort-th" @onclick="@(() => SortTable("Studies"))">Studies</th>
            <th>Actions</th>
        </thead>
        <tbody>
            @foreach(var stud in StudentList)
            {
                <tr>
                    <td><img src="@stud.Avatar" alt="@stud.FirstName @stud.LastName avatar" width="50" height="50"/></td>
                    <td>@stud.FirstName</td>
                    <td>@stud.LastName</td>
                    <td>@stud.Birthdate</td>
                    <td>@stud.Studies</td>
                <td>
                    <button @onclick="@(() => OpenDetails(stud.IdStudent))"> Open details</button>
                    <button @onclick="@(() => Delete(stud.IdStudent))">Delete</button>
                </td>
                </tr>
            }   
        </tbody>
</table>

@code {
    public IEnumerable<Student> StudentList { get; set; }
    private bool isSortedAscending;
    private string activeSortColumn;

    protected override void OnInitialized()
    {
        StudentList = StudentService.GetStudents();
    }

    private void OpenDetails(int id)
    {
        naviManager.NavigateTo($"/students/{id}");
    }

    private async Task Delete(int id)
    {
        if(await js.InvokeAsync<bool>("confirm", "Are you sure?"))
        {
            StudentService.DeleteStudent(id);
        }
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            StudentList = StudentList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                StudentList = StudentList.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                StudentList = StudentList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }
}
